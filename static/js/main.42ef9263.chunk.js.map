{"version":3,"sources":["PriceInput.js","App.js","serviceWorker.js","index.js"],"names":["NumberFormatCustom","props","inputRef","onChange","other","getInputRef","onValueChange","values","target","name","value","thousandSeparator","isNumericString","PriceInput","style","margin","TextField","InputProps","inputComponent","endAdornment","jss","create","plugins","jssPreset","rtl","RTL","StylesProvider","children","App","React","useState","investmentAmount","riskPercent","riskPrice","profitLimit","buyPrice","lossLimit","indexName","setValues","componentRef","useRef","theme","createMuiTheme","direction","typography","fontFamily","join","handleChange","event","aug","Math","floor","now","Date","tradeValume","tradeProfit","tradeRisk","ThemeProvider","className","display","width","label","type","error","inputProps","min","max","Table","ref","TableBody","TableRow","TableCell","align","toLocaleDateString","year","month","day","hour","minute","second","targetRef","filename","toPdf","Button","onClick","variant","color","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.42ef9263.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\nimport TextField from '@material-ui/core/TextField';\n\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst PriceInput = (props) => {\n  return (\n    <div style={{margin: 5}}>\n      <TextField \n        {...props}\n        InputProps={{\n          inputComponent: NumberFormatCustom,\n          endAdornment: <div>ریال</div>\n        }}\n      />\n    </div>\n  );\n}\n\nexport default PriceInput;","import React from 'react';\nimport './App.css';\nimport { createMuiTheme, ThemeProvider, TextField, Button } from '@material-ui/core';\nimport Pdf from \"react-to-pdf\";\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport PriceInput from './PriceInput';\n\n// Configure JSS\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\nfunction RTL(props) {\n  return (\n    <StylesProvider jss={jss}>\n      {props.children}\n    </StylesProvider>\n  );\n}\n\n\nfunction App() {\n  const [values, setValues] = React.useState({\n    investmentAmount: '',\n    riskPercent: null,\n    riskPrice: '',\n    profitLimit: '',\n    buyPrice: '',\n    lossLimit: '',\n    indexName: '',\n  });\n  const componentRef = React.useRef();\n  const theme = createMuiTheme({\n    direction: 'rtl',\n    typography: {\n      fontFamily: [\n        'Almarai',\n      ].join(','),\n    },\n  });\n  \n  const handleChange = (event) => {\n    let aug = {};\n    if (event.target.name === \"riskPercent\") {\n      aug = {riskPrice: values.investmentAmount * event.target.value / 100};\n    } \n    else if (event.target.name === \"riskPrice\") {\n      aug = {riskPercent: Math.floor((event.target.value / values.investmentAmount) * 100)};\n    }\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n      ...aug,\n    });\n  };\n\n  const now = new Date();\n\n  const options = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n  };\n\n  const tradeValume = values.riskPrice/(values.buyPrice - values.lossLimit * 0.015) || 0;\n  const tradeProfit = values.profitLimit - values.buyPrice;\n  const tradeRisk = values.buyPrice - values.lossLimit;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div style={{display: 'flex'}}>\n          <div className=\"box\">\n            <RTL>\n                <div style={{margin: 5}}>\n                  <TextField\n                    value={values.indexName}\n                    onChange={handleChange}\n                    style={{width: 230}}\n                    label=\"نام نماد\"\n                    name=\"indexName\"\n                  />\n                </div>\n                <PriceInput \n                  value={values.investmentAmount}\n                  onChange={handleChange}\n                  label=\"سرمایه بورسی شما\"\n                  name=\"investmentAmount\"\n                />\n                <div style={{margin: 5}}>\n                  <TextField\n                    value={values.riskPercent}\n                    onChange={handleChange}\n                    label=\"درصد ریسک مجاز\"\n                    name=\"riskPercent\"\n                    type=\"number\"\n                    style={{width: 230}}\n                    error={values.riskPercent > 100 || values.riskPercent < 0}\n                    InputProps={{\n                      inputProps: { min: 0, max: 100 },\n                      endAdornment: <div>%</div>\n                    }}\n                  />\n                </div>\n                <PriceInput\n                  value={values.riskPrice}\n                  onChange={handleChange}\n                  error={values.riskPrice > values.investmentAmount}\n                  label=\"مبلغ ریسک مجاز\"\n                  name=\"riskPrice\"\n                />\n                <PriceInput\n                  value={values.profitLimit}\n                  onChange={handleChange}\n                  label=\"حد سود\"\n                  name=\"profitLimit\"\n                />\n                <PriceInput\n                  value={values.buyPrice}\n                  onChange={handleChange}\n                  label=\"قیمت خرید\"\n                  name=\"buyPrice\"\n                />\n                <PriceInput\n                  value={values.lossLimit}\n                  onChange={handleChange}\n                  label=\"حد ضرر\"\n                  name=\"lossLimit\"\n                />\n            </RTL>\n          </div>\n          <div className=\"box\">\n            <Table ref={componentRef}>\n              <TableBody>\n                  <TableRow>\n                    <TableCell align=\"right\">تاریخ و زمان</TableCell>\n                    <TableCell align=\"right\">{now.toLocaleDateString(\"fa\", options)}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"right\">نام نماد</TableCell>\n                    <TableCell align=\"right\">{values.indexName}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"right\">حجم معامله</TableCell>\n                    <TableCell align=\"right\">{tradeValume}</TableCell>\n                    <TableCell align=\"right\">تعداد سهم</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"right\">‎ریسک معامله</TableCell>\n                    <TableCell align=\"right\">{tradeRisk}</TableCell>\n                    <TableCell align=\"right\">ریال</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"right\">سرمایه مورد نیاز</TableCell>\n                    <TableCell align=\"right\">{tradeValume * values.buyPrice}</TableCell>\n                    <TableCell align=\"right\">ریال</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"right\">سود سرمایه‌گذاری</TableCell>\n                    <TableCell align=\"right\">{tradeProfit}</TableCell>\n                    <TableCell align=\"right\">ریال</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"right\">نسبت سود به ضرر</TableCell>\n                    <TableCell align=\"right\">{(tradeProfit / tradeRisk) || 0}</TableCell>\n                  </TableRow>\n              </TableBody>\n            </Table>\n            <Pdf targetRef={componentRef} filename=\"result.pdf\">\n              {({ toPdf }) => <Button onClick={toPdf} variant=\"contained\" color=\"primary\" style={{marginTop: 'auto'}}>دانلود فایل PDF</Button>}\n            </Pdf>\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}