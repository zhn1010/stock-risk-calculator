{"version":3,"sources":["PriceInput.js","App.js","serviceWorker.js","index.js"],"names":["NumberFormatCustom","props","inputRef","onChange","other","getInputRef","onValueChange","values","target","name","value","thousandSeparator","isNumericString","PriceInput","style","margin","TextField","InputProps","inputComponent","endAdornment","jss","create","plugins","jssPreset","rtl","RTL","StylesProvider","children","numberWithCommas","x","num","regex","RegExp","toString","replace","App","React","useState","investmentAmount","riskPercent","riskPrice","profitLimit","buyPrice","lossLimit","indexName","setValues","componentRef","useRef","theme","createMuiTheme","direction","typography","fontFamily","join","handleChange","event","aug","Math","floor","now","Date","dateString","toLocaleDateString","year","month","day","timeString","toLocaleTimeString","hour","minute","second","dateTime","tradeValume","tradeProfit","tradeRisk","profitToLossRatio","parseFloat","toFixed","ThemeProvider","className","Container","maxWidth","Grid","container","item","md","width","label","type","error","inputProps","min","max","Number","Table","ref","marginBottom","TableBody","TableRow","TableCell","align","Button","variant","color","onClick","exportComponentAsPDF","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ffa44cdd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\nimport TextField from '@material-ui/core/TextField';\n\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst PriceInput = (props) => {\n  return (\n    <div style={{margin: 5}}>\n      <TextField \n        {...props}\n        InputProps={{\n          inputComponent: NumberFormatCustom,\n          endAdornment: <div>ریال</div>\n        }}\n      />\n    </div>\n  );\n}\n\nexport default PriceInput;","import React from 'react';\nimport './App.css';\nimport { createMuiTheme, ThemeProvider, TextField, Button } from '@material-ui/core';\n// import Pdf from \"react-to-pdf\";\nimport { exportComponentAsPDF } from \"react-component-export-image\";\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport PriceInput from './PriceInput';\n\n// Configure JSS\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\nfunction RTL(props) {\n  return (\n    <StylesProvider jss={jss}>\n      {props.children}\n    </StylesProvider>\n  );\n}\n\nfunction numberWithCommas(x, num = 3) {\n  const regex = new RegExp(`\\\\B(?=(\\\\d{${num}})+(?!\\\\d))`, 'g');\n  return x.toString().replace(regex, \",\");\n}\n\nfunction App() {\n  const [values, setValues] = React.useState({\n    investmentAmount: '',\n    riskPercent: null,\n    riskPrice: '',\n    profitLimit: '',\n    buyPrice: '',\n    lossLimit: '',\n    indexName: '',\n  });\n  const componentRef = React.useRef();\n  const theme = createMuiTheme({\n    direction: 'rtl',\n    typography: {\n      fontFamily: [\n        'Almarai',\n      ].join(','),\n    },\n  });\n  \n  const handleChange = (event) => {\n    let aug = {};\n    if (event.target.name === \"riskPercent\") {\n      aug = {riskPrice: values.investmentAmount * event.target.value / 100};\n    } \n    else if (event.target.name === \"riskPrice\") {\n      aug = {riskPercent: Math.floor((event.target.value / values.investmentAmount) * 100)};\n    }\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n      ...aug,\n    });\n  };\n\n  const now = new Date();\n\n  const dateOptions = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n  };\n\n  const timeOptions = {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n  };\n\n  const dateString = now.toLocaleDateString(\"fa\", dateOptions);\n  const timeString = now.toLocaleTimeString(\"fa\", timeOptions);\n\n  const dateTime = `${dateString} - ${timeString}`;\n\n  const tradeValume = values.riskPrice/(values.buyPrice - values.lossLimit) || 0;\n  const tradeProfit = tradeValume * (values.profitLimit - values.buyPrice);\n  const tradeRisk = values.riskPrice;\n  const profitToLossRatio = parseFloat(((values.profitLimit - values.buyPrice) / (values.buyPrice - values.lossLimit)) || 0).toFixed(2);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Container maxWidth=\"lg\">\n          <Grid container>\n            <Grid item md>\n              <div className=\"box\">\n                <RTL>\n                    <div style={{margin: 5}}>\n                      <TextField\n                        value={values.indexName}\n                        onChange={handleChange}\n                        style={{width: 230}}\n                        label=\"نام نماد\"\n                        name=\"indexName\"\n                      />\n                    </div>\n                    <PriceInput \n                      value={values.investmentAmount}\n                      onChange={handleChange}\n                      label=\"سرمایه بورسی شما\"\n                      name=\"investmentAmount\"\n                    />\n                    <div style={{margin: 5}}>\n                      <TextField\n                        value={values.riskPercent}\n                        onChange={handleChange}\n                        label=\"درصد ریسک مجاز\"\n                        name=\"riskPercent\"\n                        type=\"number\"\n                        style={{width: 230}}\n                        error={values.riskPercent > 100 || values.riskPercent < 0}\n                        InputProps={{\n                          inputProps: { min: 0, max: 100 },\n                          endAdornment: <div>%</div>\n                        }}\n                      />\n                    </div>\n                    <PriceInput\n                      value={values.riskPrice}\n                      onChange={handleChange}\n                      error={Number(values.riskPrice) > Number(values.investmentAmount)}\n                      label=\"مبلغ ریسک مجاز\"\n                      name=\"riskPrice\"\n                    />\n                    <PriceInput\n                      value={values.profitLimit}\n                      onChange={handleChange}\n                      label=\"حد سود\"\n                      name=\"profitLimit\"\n                    />\n                    <PriceInput\n                      value={values.buyPrice}\n                      onChange={handleChange}\n                      label=\"قیمت خرید\"\n                      name=\"buyPrice\"\n                    />\n                    <PriceInput\n                      value={values.lossLimit}\n                      onChange={handleChange}\n                      label=\"حد ضرر\"\n                      name=\"lossLimit\"\n                    />\n                </RTL>\n              </div>\n            </Grid>\n            <Grid item md>\n              <div className=\"box\">\n                <Table ref={componentRef} style={{marginBottom: 15}}>\n                  <TableBody>\n                      <TableRow>\n                        <TableCell align=\"right\">تاریخ و زمان</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{dateTime}</TableCell>\n                        <TableCell align=\"right\"></TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">نام نماد</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{values.indexName}</TableCell>\n                        <TableCell align=\"right\"></TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">حجم معامله</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{tradeValume}</TableCell>\n                        <TableCell align=\"right\">تعداد سهم</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">‎ریسک معامله</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{numberWithCommas(tradeRisk)}</TableCell>\n                        <TableCell align=\"right\">ریال</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">سرمایه مورد نیاز</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{tradeValume * values.buyPrice}</TableCell>\n                        <TableCell align=\"right\">ریال</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">سود سرمایه‌گذاری</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{tradeProfit}</TableCell>\n                        <TableCell align=\"right\">ریال</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">حد سود</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{numberWithCommas(values.profitLimit)}</TableCell>\n                        <TableCell align=\"right\">ریال</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">قیمت خرید</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{numberWithCommas(values.buyPrice)}</TableCell>\n                        <TableCell align=\"right\">ریال</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">حد ضرر</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{numberWithCommas(values.lossLimit)}</TableCell>\n                        <TableCell align=\"right\">ریال</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell align=\"right\">نسبت سود به ضرر</TableCell>\n                        <TableCell align=\"right\" className=\"bold\">{profitToLossRatio}</TableCell>\n                        <TableCell align=\"right\"></TableCell>\n                      </TableRow>\n                  </TableBody>\n                </Table>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => exportComponentAsPDF(componentRef, `${values.indexName} ${dateTime}.pdf`)}>\n                  دانلود فایل PDF\n                </Button>\n              </div>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}